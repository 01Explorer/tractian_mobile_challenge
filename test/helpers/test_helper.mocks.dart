// Mocks generated by Mockito 5.4.4 from annotations
// in tractian_challenge/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tractian_challenge/core/exceptions/failure_exception.dart'
    as _i5;
import 'package:tractian_challenge/data/datasources/local/local_datasource.dart'
    as _i8;
import 'package:tractian_challenge/domain/entities/abstract_classes/item.dart'
    as _i7;
import 'package:tractian_challenge/domain/entities/company_entity.dart' as _i6;
import 'package:tractian_challenge/domain/repositories/company_repository.dart'
    as _i3;
import 'package:tractian_challenge/domain/usecases/fetch_companies_usecase.dart'
    as _i10;
import 'package:tractian_challenge/domain/usecases/get_company_tree_components_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CompanyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompanyRepository extends _i1.Mock implements _i3.CompanyRepository {
  MockCompanyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CompanyEntity>>>
      fetchCompanies() => (super.noSuchMethod(
            Invocation.method(
              #fetchCompanies,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.CompanyEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.CompanyEntity>>(
              this,
              Invocation.method(
                #fetchCompanies,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CompanyEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Item>>> getCompanyTreeComponents(
          {required _i6.CompanyEntity? companyEntity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompanyTreeComponents,
          [],
          {#companyEntity: companyEntity},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i7.Item>>>.value(
            _FakeEither_0<_i5.Failure, List<_i7.Item>>(
          this,
          Invocation.method(
            #getCompanyTreeComponents,
            [],
            {#companyEntity: companyEntity},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Item>>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i8.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> fetchCompanies(
          {required String? dirPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCompanies,
          [],
          {#dirPath: dirPath},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #fetchCompanies,
            [],
            {#dirPath: dirPath},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<Map<String, dynamic>>>>
      getCompanyTreeComponents({required String? dirPath}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCompanyTreeComponents,
              [],
              {#dirPath: dirPath},
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<Map<String, dynamic>>>>.value(
                _FakeEither_0<_i5.Failure, List<Map<String, dynamic>>>(
              this,
              Invocation.method(
                #getCompanyTreeComponents,
                [],
                {#dirPath: dirPath},
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<Map<String, dynamic>>>>);
}

/// A class which mocks [GetCompanyTreeComponentsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCompanyTreeComponentsUseCase extends _i1.Mock
    implements _i9.GetCompanyTreeComponentsUseCase {
  MockGetCompanyTreeComponentsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Item>>> call(
          {required _i6.CompanyEntity? companyEntity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#companyEntity: companyEntity},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i7.Item>>>.value(
            _FakeEither_0<_i5.Failure, List<_i7.Item>>(
          this,
          Invocation.method(
            #call,
            [],
            {#companyEntity: companyEntity},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Item>>>);
}

/// A class which mocks [FetchCompaniesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCompaniesUsecase extends _i1.Mock
    implements _i10.FetchCompaniesUsecase {
  MockFetchCompaniesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CompanyEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.CompanyEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.CompanyEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CompanyEntity>>>);
}
